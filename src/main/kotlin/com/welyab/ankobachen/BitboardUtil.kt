/*
 * Copyright (C) 2020 Welyab da Silva Paula
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
@file:Suppress("unused")

package com.welyab.ankobachen

import com.welyab.ankobachen.extensions.numericValue
import com.welyab.ankobachen.extensions.shift
import com.welyab.ankobachen.extensions.toBinaryString
import kotlin.ULong
import kotlin.ULong as Blockers
import kotlin.ULong as Movements

@ExperimentalUnsignedTypes
object BitboardUtil {

    private val KING_MOVE_MASK = listOf(
        0x40c0000000000000uL, 0xa0e0000000000000uL, 0x5070000000000000uL, 0x2838000000000000uL,
        0x141c000000000000uL, 0x0a0e000000000000uL, 0x0507000000000000uL, 0x0203000000000000uL,
        0xc040c00000000000uL, 0xe0a0e00000000000uL, 0x7050700000000000uL, 0x3828380000000000uL,
        0x1c141c0000000000uL, 0x0e0a0e0000000000uL, 0x0705070000000000uL, 0x0302030000000000uL,
        0x00c040c000000000uL, 0x00e0a0e000000000uL, 0x0070507000000000uL, 0x0038283800000000uL,
        0x001c141c00000000uL, 0x000e0a0e00000000uL, 0x0007050700000000uL, 0x0003020300000000uL,
        0x0000c040c0000000uL, 0x0000e0a0e0000000uL, 0x0000705070000000uL, 0x0000382838000000uL,
        0x00001c141c000000uL, 0x00000e0a0e000000uL, 0x0000070507000000uL, 0x0000030203000000uL,
        0x000000c040c00000uL, 0x000000e0a0e00000uL, 0x0000007050700000uL, 0x0000003828380000uL,
        0x0000001c141c0000uL, 0x0000000e0a0e0000uL, 0x0000000705070000uL, 0x0000000302030000uL,
        0x00000000c040c000uL, 0x00000000e0a0e000uL, 0x0000000070507000uL, 0x0000000038283800uL,
        0x000000001c141c00uL, 0x000000000e0a0e00uL, 0x0000000007050700uL, 0x0000000003020300uL,
        0x0000000000c040c0uL, 0x0000000000e0a0e0uL, 0x0000000000705070uL, 0x0000000000382838uL,
        0x00000000001c141cuL, 0x00000000000e0a0euL, 0x0000000000070507uL, 0x0000000000030203uL,
        0x000000000000c040uL, 0x000000000000e0a0uL, 0x0000000000007050uL, 0x0000000000003828uL,
        0x0000000000001c14uL, 0x0000000000000e0auL, 0x0000000000000705uL, 0x0000000000000302uL
    )

    fun getKingMoveMask(): List<ULong> = KING_MOVE_MASK

    private val ROOK_MOVE_MASK = listOf(
        0x7e80808080808000uL, 0x3e40404040404000uL, 0x5e20202020202000uL, 0x6e10101010101000uL,
        0x7608080808080800uL, 0x7a04040404040400uL, 0x7c02020202020200uL, 0x7e01010101010100uL,
        0x007e808080808000uL, 0x003e404040404000uL, 0x005e202020202000uL, 0x006e101010101000uL,
        0x0076080808080800uL, 0x007a040404040400uL, 0x007c020202020200uL, 0x007e010101010100uL,
        0x00807e8080808000uL, 0x00403e4040404000uL, 0x00205e2020202000uL, 0x00106e1010101000uL,
        0x0008760808080800uL, 0x00047a0404040400uL, 0x00027c0202020200uL, 0x00017e0101010100uL,
        0x0080807e80808000uL, 0x0040403e40404000uL, 0x0020205e20202000uL, 0x0010106e10101000uL,
        0x0008087608080800uL, 0x0004047a04040400uL, 0x0002027c02020200uL, 0x0001017e01010100uL,
        0x008080807e808000uL, 0x004040403e404000uL, 0x002020205e202000uL, 0x001010106e101000uL,
        0x0008080876080800uL, 0x000404047a040400uL, 0x000202027c020200uL, 0x000101017e010100uL,
        0x00808080807e8000uL, 0x00404040403e4000uL, 0x00202020205e2000uL, 0x00101010106e1000uL,
        0x0008080808760800uL, 0x00040404047a0400uL, 0x00020202027c0200uL, 0x00010101017e0100uL,
        0x0080808080807e00uL, 0x0040404040403e00uL, 0x0020202020205e00uL, 0x0010101010106e00uL,
        0x0008080808087600uL, 0x0004040404047a00uL, 0x0002020202027c00uL, 0x0001010101017e00uL,
        0x008080808080807euL, 0x004040404040403euL, 0x002020202020205euL, 0x001010101010106euL,
        0x0008080808080876uL, 0x000404040404047auL, 0x000202020202027cuL, 0x000101010101017euL
    )

    fun getRookMoveMask(): List<ULong> = ROOK_MOVE_MASK

    private val BISHOP_MOVE_MASK = listOf(
        0x0040201008040200uL, 0x0020100804020000uL, 0x0050080402000000uL, 0x0028440200000000uL,
        0x0014224000000000uL, 0x000a102040000000uL, 0x0004081020400000uL, 0x0002040810204000uL,
        0x0000402010080400uL, 0x0000201008040200uL, 0x0000500804020000uL, 0x0000284402000000uL,
        0x0000142240000000uL, 0x00000a1020400000uL, 0x0000040810204000uL, 0x0000020408102000uL,
        0x0040004020100800uL, 0x0020002010080400uL, 0x0050005008040200uL, 0x0028002844020000uL,
        0x0014001422400000uL, 0x000a000a10204000uL, 0x0004000408102000uL, 0x0002000204081000uL,
        0x0020400040201000uL, 0x0010200020100800uL, 0x0008500050080400uL, 0x0044280028440200uL,
        0x0022140014224000uL, 0x00100a000a102000uL, 0x0008040004081000uL, 0x0004020002040800uL,
        0x0010204000402000uL, 0x0008102000201000uL, 0x0004085000500800uL, 0x0002442800284400uL,
        0x0040221400142200uL, 0x0020100a000a1000uL, 0x0010080400040800uL, 0x0008040200020400uL,
        0x0008102040004000uL, 0x0004081020002000uL, 0x0002040850005000uL, 0x0000024428002800uL,
        0x0000402214001400uL, 0x004020100a000a00uL, 0x0020100804000400uL, 0x0010080402000200uL,
        0x0004081020400000uL, 0x0002040810200000uL, 0x0000020408500000uL, 0x0000000244280000uL,
        0x0000004022140000uL, 0x00004020100a0000uL, 0x0040201008040000uL, 0x0020100804020000uL,
        0x0002040810204000uL, 0x0000020408102000uL, 0x0000000204085000uL, 0x0000000002442800uL,
        0x0000000040221400uL, 0x0000004020100a00uL, 0x0000402010080400uL, 0x0040201008040200uL
    )

    fun getBishopMoveMask(): List<ULong> = BISHOP_MOVE_MASK

    private val KNIGHT_MOVE_MASK = listOf(
        0x0020400000000000uL, 0x0010a00000000000uL, 0x0088500000000000uL, 0x0044280000000000uL,
        0x0022140000000000uL, 0x00110a0000000000uL, 0x0008050000000000uL, 0x0004020000000000uL,
        0x2000204000000000uL, 0x100010a000000000uL, 0x8800885000000000uL, 0x4400442800000000uL,
        0x2200221400000000uL, 0x1100110a00000000uL, 0x0800080500000000uL, 0x0400040200000000uL,
        0x4020002040000000uL, 0xa0100010a0000000uL, 0x5088008850000000uL, 0x2844004428000000uL,
        0x1422002214000000uL, 0x0a1100110a000000uL, 0x0508000805000000uL, 0x0204000402000000uL,
        0x0040200020400000uL, 0x00a0100010a00000uL, 0x0050880088500000uL, 0x0028440044280000uL,
        0x0014220022140000uL, 0x000a1100110a0000uL, 0x0005080008050000uL, 0x0002040004020000uL,
        0x0000402000204000uL, 0x0000a0100010a000uL, 0x0000508800885000uL, 0x0000284400442800uL,
        0x0000142200221400uL, 0x00000a1100110a00uL, 0x0000050800080500uL, 0x0000020400040200uL,
        0x0000004020002040uL, 0x000000a0100010a0uL, 0x0000005088008850uL, 0x0000002844004428uL,
        0x0000001422002214uL, 0x0000000a1100110auL, 0x0000000508000805uL, 0x0000000204000402uL,
        0x0000000040200020uL, 0x00000000a0100010uL, 0x0000000050880088uL, 0x0000000028440044uL,
        0x0000000014220022uL, 0x000000000a110011uL, 0x0000000005080008uL, 0x0000000002040004uL,
        0x0000000000402000uL, 0x0000000000a01000uL, 0x0000000000508800uL, 0x0000000000284400uL,
        0x0000000000142200uL, 0x00000000000a1100uL, 0x0000000000050800uL, 0x0000000000020400uL
    )

    fun getKnightMoveMask(): List<ULong> = KNIGHT_MOVE_MASK

    private val WHITE_PAWN_SINGLE_MOVE_MASK = listOf(
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x8000000000000000uL, 0x4000000000000000uL, 0x2000000000000000uL, 0x1000000000000000uL,
        0x0800000000000000uL, 0x0400000000000000uL, 0x0200000000000000uL, 0x0100000000000000uL,
        0x0080000000000000uL, 0x0040000000000000uL, 0x0020000000000000uL, 0x0010000000000000uL,
        0x0008000000000000uL, 0x0004000000000000uL, 0x0002000000000000uL, 0x0001000000000000uL,
        0x0000800000000000uL, 0x0000400000000000uL, 0x0000200000000000uL, 0x0000100000000000uL,
        0x0000080000000000uL, 0x0000040000000000uL, 0x0000020000000000uL, 0x0000010000000000uL,
        0x0000008000000000uL, 0x0000004000000000uL, 0x0000002000000000uL, 0x0000001000000000uL,
        0x0000000800000000uL, 0x0000000400000000uL, 0x0000000200000000uL, 0x0000000100000000uL,
        0x0000000080000000uL, 0x0000000040000000uL, 0x0000000020000000uL, 0x0000000010000000uL,
        0x0000000008000000uL, 0x0000000004000000uL, 0x0000000002000000uL, 0x0000000001000000uL,
        0x0000000000800000uL, 0x0000000000400000uL, 0x0000000000200000uL, 0x0000000000100000uL,
        0x0000000000080000uL, 0x0000000000040000uL, 0x0000000000020000uL, 0x0000000000010000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL
    )

    fun getWhitePawnSingleMoveMask() = WHITE_PAWN_SINGLE_MOVE_MASK

    private val BLACK_PAWN_SINGLE_MOVE_MASK = listOf(
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000800000000000uL, 0x0000400000000000uL, 0x0000200000000000uL, 0x0000100000000000uL,
        0x0000080000000000uL, 0x0000040000000000uL, 0x0000020000000000uL, 0x0000010000000000uL,
        0x0000008000000000uL, 0x0000004000000000uL, 0x0000002000000000uL, 0x0000001000000000uL,
        0x0000000800000000uL, 0x0000000400000000uL, 0x0000000200000000uL, 0x0000000100000000uL,
        0x0000000080000000uL, 0x0000000040000000uL, 0x0000000020000000uL, 0x0000000010000000uL,
        0x0000000008000000uL, 0x0000000004000000uL, 0x0000000002000000uL, 0x0000000001000000uL,
        0x0000000000800000uL, 0x0000000000400000uL, 0x0000000000200000uL, 0x0000000000100000uL,
        0x0000000000080000uL, 0x0000000000040000uL, 0x0000000000020000uL, 0x0000000000010000uL,
        0x0000000000008000uL, 0x0000000000004000uL, 0x0000000000002000uL, 0x0000000000001000uL,
        0x0000000000000800uL, 0x0000000000000400uL, 0x0000000000000200uL, 0x0000000000000100uL,
        0x0000000000000080uL, 0x0000000000000040uL, 0x0000000000000020uL, 0x0000000000000010uL,
        0x0000000000000008uL, 0x0000000000000004uL, 0x0000000000000002uL, 0x0000000000000001uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL
    )

    fun getBlackPawnSingleMoveMask() = BLACK_PAWN_SINGLE_MOVE_MASK

    private val WHITE_PAWN_CAPTURE_MOVE_MASK = listOf(
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x4000000000000000uL, 0xa000000000000000uL, 0x5000000000000000uL, 0x2800000000000000uL,
        0x1400000000000000uL, 0x0a00000000000000uL, 0x0500000000000000uL, 0x0200000000000000uL,
        0x0040000000000000uL, 0x00a0000000000000uL, 0x0050000000000000uL, 0x0028000000000000uL,
        0x0014000000000000uL, 0x000a000000000000uL, 0x0005000000000000uL, 0x0002000000000000uL,
        0x0000400000000000uL, 0x0000a00000000000uL, 0x0000500000000000uL, 0x0000280000000000uL,
        0x0000140000000000uL, 0x00000a0000000000uL, 0x0000050000000000uL, 0x0000020000000000uL,
        0x0000004000000000uL, 0x000000a000000000uL, 0x0000005000000000uL, 0x0000002800000000uL,
        0x0000001400000000uL, 0x0000000a00000000uL, 0x0000000500000000uL, 0x0000000200000000uL,
        0x0000000040000000uL, 0x00000000a0000000uL, 0x0000000050000000uL, 0x0000000028000000uL,
        0x0000000014000000uL, 0x000000000a000000uL, 0x0000000005000000uL, 0x0000000002000000uL,
        0x0000000000400000uL, 0x0000000000a00000uL, 0x0000000000500000uL, 0x0000000000280000uL,
        0x0000000000140000uL, 0x00000000000a0000uL, 0x0000000000050000uL, 0x0000000000020000uL,
        0x0000000000004000uL, 0x000000000000a000uL, 0x0000000000005000uL, 0x0000000000002800uL,
        0x0000000000001400uL, 0x0000000000000a00uL, 0x0000000000000500uL, 0x0000000000000200uL
    )

    fun getWhitePawnCaptureMoveMask() = WHITE_PAWN_CAPTURE_MOVE_MASK

    private val BLACK_PAWN_CAPTURE_MOVE_MASK = listOf(
        0x0040000000000000uL, 0x00a0000000000000uL, 0x0050000000000000uL, 0x0028000000000000uL,
        0x0014000000000000uL, 0x000a000000000000uL, 0x0005000000000000uL, 0x0002000000000000uL,
        0x0000400000000000uL, 0x0000a00000000000uL, 0x0000500000000000uL, 0x0000280000000000uL,
        0x0000140000000000uL, 0x00000a0000000000uL, 0x0000050000000000uL, 0x0000020000000000uL,
        0x0000004000000000uL, 0x000000a000000000uL, 0x0000005000000000uL, 0x0000002800000000uL,
        0x0000001400000000uL, 0x0000000a00000000uL, 0x0000000500000000uL, 0x0000000200000000uL,
        0x0000000040000000uL, 0x00000000a0000000uL, 0x0000000050000000uL, 0x0000000028000000uL,
        0x0000000014000000uL, 0x000000000a000000uL, 0x0000000005000000uL, 0x0000000002000000uL,
        0x0000000000400000uL, 0x0000000000a00000uL, 0x0000000000500000uL, 0x0000000000280000uL,
        0x0000000000140000uL, 0x00000000000a0000uL, 0x0000000000050000uL, 0x0000000000020000uL,
        0x0000000000004000uL, 0x000000000000a000uL, 0x0000000000005000uL, 0x0000000000002800uL,
        0x0000000000001400uL, 0x0000000000000a00uL, 0x0000000000000500uL, 0x0000000000000200uL,
        0x0000000000000040uL, 0x00000000000000a0uL, 0x0000000000000050uL, 0x0000000000000028uL,
        0x0000000000000014uL, 0x000000000000000auL, 0x0000000000000005uL, 0x0000000000000002uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL
    )

    fun getBlackPawnCaptureMoveMask() = BLACK_PAWN_CAPTURE_MOVE_MASK

    private val WHITE_PAWN_DOUBLE_MOVE_MASK = listOf(
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000080800000uL, 0x0000000040400000uL, 0x0000000020200000uL, 0x0000000010100000uL,
        0x0000000008080000uL, 0x0000000004040000uL, 0x0000000002020000uL, 0x0000000001010000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL
    )

    fun getWhitePawnDoubleMoveMask() = WHITE_PAWN_DOUBLE_MOVE_MASK

    private val BLACK_PAWN_DOUBLE_MOVE_MASK = listOf(
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000808000000000uL, 0x0000404000000000uL, 0x0000202000000000uL, 0x0000101000000000uL,
        0x0000080800000000uL, 0x0000040400000000uL, 0x0000020200000000uL, 0x0000010100000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL
    )

    fun getBlackPawnDoubleMoveMask() = BLACK_PAWN_DOUBLE_MOVE_MASK

    private val ROOK_MAGICS = listOf(
        0x0040003402410286uL, 0x4086023048010084uL, 0x0041000208040001uL, 0x0022002004100902uL,
        0x40045000200d0129uL, 0x0000081020004101uL, 0x102b001022804001uL, 0x00044a1200802102uL,
        0x00300c0505a84200uL, 0x2000100102080400uL, 0x0001041020400801uL, 0x0008000400800880uL,
        0x00d0000804004040uL, 0x0020004012210300uL, 0x00201008400124c0uL, 0x0140082240800180uL,
        0x012a040040820001uL, 0x012008b042040001uL, 0x1206001004020008uL, 0x4005004800050010uL,
        0x0000420020120008uL, 0x000040a001030050uL, 0x0c10004020084008uL, 0x4080004020004002uL,
        0x5010008402000061uL, 0x2830022104004810uL, 0x0842006812001004uL, 0x0400041101000800uL,
        0x0010000800801081uL, 0x0000402001001100uL, 0x0140008040802004uL, 0x4800400020800084uL,
        0x0020008200040041uL, 0x0880018400020810uL, 0x2002000200100409uL, 0x6240080100041100uL,
        0x00e40c2100100100uL, 0x4005001100200440uL, 0x0000208200410a00uL, 0x2080004040002008uL,
        0x0004120018490084uL, 0x0000040002100108uL, 0x6109010008040002uL, 0x2804008008000480uL,
        0x0008008008100680uL, 0x0202020020441080uL, 0x1910084008200042uL, 0x0080004000200044uL,
        0x1505002041860900uL, 0x0402000108040200uL, 0x2802001002000408uL, 0x0802000810200600uL,
        0x4011000810010020uL, 0x0001002000104100uL, 0x0029002040010082uL, 0x0002002100420080uL,
        0x01000c4122820100uL, 0x2300108200040100uL, 0x2900010002082400uL, 0x02800c0008001281uL,
        0x0100100100082004uL, 0x0200084200102080uL, 0x0240001000402001uL, 0x0580005021400080uL
    )

    fun getRookMagics() = ROOK_MAGICS

    private val BISHOP_MAGICS = listOf(
        0x00042c0802440084uL, 0x4000208801c10400uL, 0x0100008810012200uL, 0x6000002209112400uL,
        0x020c020008420200uL, 0x4d00540206011120uL, 0x0010008048080400uL, 0x204042481409200auL,
        0x0242441104010000uL, 0x00505009014c0080uL, 0x104028a808482000uL, 0x2018002120410210uL,
        0x0100004042020200uL, 0x0020590441107044uL, 0x11124422011002e4uL, 0x2080410450404040uL,
        0x0042424407001020uL, 0x0522048404140181uL, 0x0840100400402820uL, 0x2000420204100200uL,
        0x050000c010401200uL, 0x0000120309021000uL, 0x0002011920421820uL, 0x0102121040180480uL,
        0x600814a024010300uL, 0x1208210406210080uL, 0x0201080600902200uL, 0x0020009004050040uL,
        0x0400601108080080uL, 0x0d01008a44880800uL, 0x042401a014440404uL, 0x140108a000c02402uL,
        0x000a120010210101uL, 0x500206a000441000uL, 0x049003000082410duL, 0x0003001003004000uL,
        0x0001080044004090uL, 0x00480404580224a8uL, 0x00901420300400a2uL, 0x00042406202004c5uL,
        0x0001401100525002uL, 0x1820602508080400uL, 0x0120209410080800uL, 0x0002009402510000uL,
        0x4008008c01202300uL, 0x48a802100090200buL, 0x11a4410208482100uL, 0x080408c809480801uL,
        0x000c010c02220280uL, 0x10c1040402080440uL, 0x4000084110900600uL, 0x0010040420402000uL,
        0x0104082040406a05uL, 0x2200088801002401uL, 0x0001042820810a00uL, 0x040a28e111020200uL,
        0x0080240200842005uL, 0x0344040a52100002uL, 0x00010420452a2040uL, 0x0401104002080040uL,
        0x4628048500400086uL, 0x1004412401050400uL, 0x1010024801252042uL, 0x0088508100510200uL
    )

    fun getBishopMagics() = BISHOP_MAGICS

    private val BISHOP_RAYS = listOf(
        0x0040201008040201uL, 0x00a0100804020100uL, 0x0050880402010000uL, 0x0028448201000000uL,
        0x0014224180000000uL, 0x000a112040800000uL, 0x0005081020408000uL, 0x0002040810204080uL,
        0x4000402010080402uL, 0xa000a01008040201uL, 0x5000508804020100uL, 0x2800284482010000uL,
        0x1400142241800000uL, 0x0a000a1120408000uL, 0x0500050810204080uL, 0x0200020408102040uL,
        0x2040004020100804uL, 0x10a000a010080402uL, 0x8850005088040201uL, 0x4428002844820100uL,
        0x2214001422418000uL, 0x110a000a11204080uL, 0x0805000508102040uL, 0x0402000204081020uL,
        0x1020400040201008uL, 0x0810a000a0100804uL, 0x0488500050880402uL, 0x8244280028448201uL,
        0x4122140014224180uL, 0x20110a000a112040uL, 0x1008050005081020uL, 0x0804020002040810uL,
        0x0810204000402010uL, 0x040810a000a01008uL, 0x0204885000508804uL, 0x0182442800284482uL,
        0x8041221400142241uL, 0x4020110a000a1120uL, 0x2010080500050810uL, 0x1008040200020408uL,
        0x0408102040004020uL, 0x02040810a000a010uL, 0x0102048850005088uL, 0x0001824428002844uL,
        0x0080412214001422uL, 0x804020110a000a11uL, 0x4020100805000508uL, 0x2010080402000204uL,
        0x0204081020400040uL, 0x0102040810a000a0uL, 0x0001020488500050uL, 0x0000018244280028uL,
        0x0000804122140014uL, 0x00804020110a000auL, 0x8040201008050005uL, 0x4020100804020002uL,
        0x0102040810204000uL, 0x000102040810a000uL, 0x0000010204885000uL, 0x0000000182442800uL,
        0x0000008041221400uL, 0x0000804020110a00uL, 0x0080402010080500uL, 0x8040201008040200uL
    )

    fun getBishopRays() = BISHOP_RAYS

    private val ROOK_RAYS = listOf(
        0x7f80808080808080uL, 0xbf40404040404040uL, 0xdf20202020202020uL, 0xef10101010101010uL,
        0xf708080808080808uL, 0xfb04040404040404uL, 0xfd02020202020202uL, 0xfe01010101010101uL,
        0x807f808080808080uL, 0x40bf404040404040uL, 0x20df202020202020uL, 0x10ef101010101010uL,
        0x08f7080808080808uL, 0x04fb040404040404uL, 0x02fd020202020202uL, 0x01fe010101010101uL,
        0x80807f8080808080uL, 0x4040bf4040404040uL, 0x2020df2020202020uL, 0x1010ef1010101010uL,
        0x0808f70808080808uL, 0x0404fb0404040404uL, 0x0202fd0202020202uL, 0x0101fe0101010101uL,
        0x8080807f80808080uL, 0x404040bf40404040uL, 0x202020df20202020uL, 0x101010ef10101010uL,
        0x080808f708080808uL, 0x040404fb04040404uL, 0x020202fd02020202uL, 0x010101fe01010101uL,
        0x808080807f808080uL, 0x40404040bf404040uL, 0x20202020df202020uL, 0x10101010ef101010uL,
        0x08080808f7080808uL, 0x04040404fb040404uL, 0x02020202fd020202uL, 0x01010101fe010101uL,
        0x80808080807f8080uL, 0x4040404040bf4040uL, 0x2020202020df2020uL, 0x1010101010ef1010uL,
        0x0808080808f70808uL, 0x0404040404fb0404uL, 0x0202020202fd0202uL, 0x0101010101fe0101uL,
        0x8080808080807f80uL, 0x404040404040bf40uL, 0x202020202020df20uL, 0x101010101010ef10uL,
        0x080808080808f708uL, 0x040404040404fb04uL, 0x020202020202fd02uL, 0x010101010101fe01uL,
        0x808080808080807fuL, 0x40404040404040bfuL, 0x20202020202020dfuL, 0x10101010101010efuL,
        0x08080808080808f7uL, 0x04040404040404fbuL, 0x02020202020202fduL, 0x01010101010101feuL
    )

    fun getRookRays() = ROOK_RAYS

    private val BISHOP_ADJACENCY = listOf(
        0x0040000000000000uL, 0x00a0000000000000uL, 0x0050000000000000uL, 0x0028000000000000uL,
        0x0014000000000000uL, 0x000a000000000000uL, 0x0005000000000000uL, 0x0002000000000000uL,
        0x4000400000000000uL, 0xa000a00000000000uL, 0x5000500000000000uL, 0x2800280000000000uL,
        0x1400140000000000uL, 0x0a000a0000000000uL, 0x0500050000000000uL, 0x0200020000000000uL,
        0x0040004000000000uL, 0x00a000a000000000uL, 0x0050005000000000uL, 0x0028002800000000uL,
        0x0014001400000000uL, 0x000a000a00000000uL, 0x0005000500000000uL, 0x0002000200000000uL,
        0x0000400040000000uL, 0x0000a000a0000000uL, 0x0000500050000000uL, 0x0000280028000000uL,
        0x0000140014000000uL, 0x00000a000a000000uL, 0x0000050005000000uL, 0x0000020002000000uL,
        0x0000004000400000uL, 0x000000a000a00000uL, 0x0000005000500000uL, 0x0000002800280000uL,
        0x0000001400140000uL, 0x0000000a000a0000uL, 0x0000000500050000uL, 0x0000000200020000uL,
        0x0000000040004000uL, 0x00000000a000a000uL, 0x0000000050005000uL, 0x0000000028002800uL,
        0x0000000014001400uL, 0x000000000a000a00uL, 0x0000000005000500uL, 0x0000000002000200uL,
        0x0000000000400040uL, 0x0000000000a000a0uL, 0x0000000000500050uL, 0x0000000000280028uL,
        0x0000000000140014uL, 0x00000000000a000auL, 0x0000000000050005uL, 0x0000000000020002uL,
        0x0000000000004000uL, 0x000000000000a000uL, 0x0000000000005000uL, 0x0000000000002800uL,
        0x0000000000001400uL, 0x0000000000000a00uL, 0x0000000000000500uL, 0x0000000000000200uL
    )

    fun getBishopAdjacency() = BISHOP_ADJACENCY

    private val ROOK_ADJACENCY = listOf(
        0x4080000000000000uL, 0xa040000000000000uL, 0x5020000000000000uL, 0x2810000000000000uL,
        0x1408000000000000uL, 0x0a04000000000000uL, 0x0502000000000000uL, 0x0201000000000000uL,
        0x8040800000000000uL, 0x40a0400000000000uL, 0x2050200000000000uL, 0x1028100000000000uL,
        0x0814080000000000uL, 0x040a040000000000uL, 0x0205020000000000uL, 0x0102010000000000uL,
        0x0080408000000000uL, 0x0040a04000000000uL, 0x0020502000000000uL, 0x0010281000000000uL,
        0x0008140800000000uL, 0x00040a0400000000uL, 0x0002050200000000uL, 0x0001020100000000uL,
        0x0000804080000000uL, 0x000040a040000000uL, 0x0000205020000000uL, 0x0000102810000000uL,
        0x0000081408000000uL, 0x0000040a04000000uL, 0x0000020502000000uL, 0x0000010201000000uL,
        0x0000008040800000uL, 0x00000040a0400000uL, 0x0000002050200000uL, 0x0000001028100000uL,
        0x0000000814080000uL, 0x000000040a040000uL, 0x0000000205020000uL, 0x0000000102010000uL,
        0x0000000080408000uL, 0x0000000040a04000uL, 0x0000000020502000uL, 0x0000000010281000uL,
        0x0000000008140800uL, 0x00000000040a0400uL, 0x0000000002050200uL, 0x0000000001020100uL,
        0x0000000000804080uL, 0x000000000040a040uL, 0x0000000000205020uL, 0x0000000000102810uL,
        0x0000000000081408uL, 0x0000000000040a04uL, 0x0000000000020502uL, 0x0000000000010201uL,
        0x0000000000008040uL, 0x00000000000040a0uL, 0x0000000000002050uL, 0x0000000000001028uL,
        0x0000000000000814uL, 0x000000000000040auL, 0x0000000000000205uL, 0x0000000000000102uL
    )

    fun getRookAdjacency() = ROOK_ADJACENCY

    private val WHITE_PASSED_PAWN_MASK = listOf(
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x00c0000000000000uL, 0x00e0000000000000uL, 0x0070000000000000uL, 0x0038000000000000uL,
        0x001c000000000000uL, 0x000e000000000000uL, 0x0007000000000000uL, 0x0003000000000000uL,
        0x00c0c00000000000uL, 0x00e0e00000000000uL, 0x0070700000000000uL, 0x0038380000000000uL,
        0x001c1c0000000000uL, 0x000e0e0000000000uL, 0x0007070000000000uL, 0x0003030000000000uL,
        0x00c0c0c000000000uL, 0x00e0e0e000000000uL, 0x0070707000000000uL, 0x0038383800000000uL,
        0x001c1c1c00000000uL, 0x000e0e0e00000000uL, 0x0007070700000000uL, 0x0003030300000000uL,
        0x00c0c0c0c0000000uL, 0x00e0e0e0e0000000uL, 0x0070707070000000uL, 0x0038383838000000uL,
        0x001c1c1c1c000000uL, 0x000e0e0e0e000000uL, 0x0007070707000000uL, 0x0003030303000000uL,
        0x00c0c0c0c0c00000uL, 0x00e0e0e0e0e00000uL, 0x0070707070700000uL, 0x0038383838380000uL,
        0x001c1c1c1c1c0000uL, 0x000e0e0e0e0e0000uL, 0x0007070707070000uL, 0x0003030303030000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL
    )

    fun getWhitePassedPawnMask() = WHITE_PASSED_PAWN_MASK

    private val BLACK_PASSED_PAWN_MASK = listOf(
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000c0c0c0c0c000uL, 0x0000e0e0e0e0e000uL, 0x0000707070707000uL, 0x0000383838383800uL,
        0x00001c1c1c1c1c00uL, 0x00000e0e0e0e0e00uL, 0x0000070707070700uL, 0x0000030303030300uL,
        0x000000c0c0c0c000uL, 0x000000e0e0e0e000uL, 0x0000007070707000uL, 0x0000003838383800uL,
        0x0000001c1c1c1c00uL, 0x0000000e0e0e0e00uL, 0x0000000707070700uL, 0x0000000303030300uL,
        0x00000000c0c0c000uL, 0x00000000e0e0e000uL, 0x0000000070707000uL, 0x0000000038383800uL,
        0x000000001c1c1c00uL, 0x000000000e0e0e00uL, 0x0000000007070700uL, 0x0000000003030300uL,
        0x0000000000c0c000uL, 0x0000000000e0e000uL, 0x0000000000707000uL, 0x0000000000383800uL,
        0x00000000001c1c00uL, 0x00000000000e0e00uL, 0x0000000000070700uL, 0x0000000000030300uL,
        0x000000000000c000uL, 0x000000000000e000uL, 0x0000000000007000uL, 0x0000000000003800uL,
        0x0000000000001c00uL, 0x0000000000000e00uL, 0x0000000000000700uL, 0x0000000000000300uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL,
        0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL, 0x0000000000000000uL
    )

    fun getBlackPassedPawnMask() = BLACK_PASSED_PAWN_MASK

    private val ROOK_MAGIC_INDEX_BITS = listOf(
        12, 11, 11, 11, 11, 11, 11, 12,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        12, 11, 11, 11, 11, 11, 11, 12
    )

    fun getRookMagicIndexBits() = ROOK_MAGIC_INDEX_BITS

    private val BISHOP_MAGIC_INDEX_BITS = listOf(
        6, 5, 5, 5, 5, 5, 5, 6,
        5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 7, 7, 7, 7, 5, 5,
        5, 5, 7, 9, 9, 7, 5, 5,
        5, 5, 7, 9, 9, 7, 5, 5,
        5, 5, 7, 7, 7, 7, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5,
        6, 5, 5, 5, 5, 5, 5, 6
    )

    fun getBishopMagicIndexBits() = BISHOP_MAGIC_INDEX_BITS

    private val ROWS_MASKS = listOf(
        0xff00000000000000uL,
        0x00ff000000000000uL,
        0x0000ff0000000000uL,
        0x000000ff00000000uL,
        0x00000000ff000000uL,
        0x0000000000ff0000uL,
        0x000000000000ff00uL,
        0x00000000000000ffuL
    )

    fun getRowsMap() = ROWS_MASKS

    private val COLUMNS_MASKS = listOf(
        0x8080808080808080uL,
        0x4040404040404040uL,
        0x2020202020202020uL,
        0x1010101010101010uL,
        0x0808080808080808uL,
        0x0404040404040404uL,
        0x0202020202020202uL,
        0x0101010101010101uL
    )

    fun getColumnMasks() = COLUMNS_MASKS

    fun getRookMovementDatabase(): List<List<ULong>> {
        return getSlidingPieceMovementDatabase(
            getRookMovementMap(),
            ROOK_MAGICS,
            ROOK_MAGIC_INDEX_BITS
        )
    }

    fun getBishopMovementDatabase(): List<List<ULong>> {
        return getSlidingPieceMovementDatabase(
            getBishopMovementMap(),
            BISHOP_MAGICS,
            BISHOP_MAGIC_INDEX_BITS
        )
    }

    private fun getSlidingPieceMovementDatabase(
        movementDatabase: Map<Int, Map<Blockers, Movements>>,
        magics: List<ULong>,
        magicIndexBits: List<Int>
    ): List<List<ULong>> {
        return (0..63)
            .asSequence()
            .map { squareIndex ->
                (movementDatabase[squareIndex] ?: error("no entry of $squareIndex"))
                    .asSequence()
                    .map { it.key * magics[squareIndex] to it.value }
                    .map { it.first.shift(64 - magicIndexBits[squareIndex]) to it.second }
                    .sortedBy { it.first }
                    .map { it.second }
                    .toList()
            }
            .toList()
    }

    private fun createBoard(value: ULong = 0uL): Array<Array<Int>> {
        val map = arrayOf(
            arrayOf(0, 0, 0, 0, 0, 0, 0, 0),
            arrayOf(0, 0, 0, 0, 0, 0, 0, 0),
            arrayOf(0, 0, 0, 0, 0, 0, 0, 0),
            arrayOf(0, 0, 0, 0, 0, 0, 0, 0),
            arrayOf(0, 0, 0, 0, 0, 0, 0, 0),
            arrayOf(0, 0, 0, 0, 0, 0, 0, 0),
            arrayOf(0, 0, 0, 0, 0, 0, 0, 0),
            arrayOf(0, 0, 0, 0, 0, 0, 0, 0)
        )

        value.toBinaryString().forEachIndexed { index, bitChar ->
            val position = Position.from(index)
            map[position.row][position.column] = bitChar.numericValue
        }

        return map
    }

    private fun Array<Array<Int>>.toULong() =
        asSequence()
            .flatMap { it.asSequence() }.map { it.toString() }
            .joinToString(separator = "")
            .toULong(2)

    private fun getPermutations(bits: ULong): List<ULong> {
        return HashSet<String>()
            .apply {
                permute(bits.toBinaryString().toCharArray(), 0, this)
            }
            .asSequence()
            .map { it.toULong(2) }
            .toList()
    }

    private fun permute(chars: CharArray, currentIndex: Int, set: MutableSet<String>) {
        set += chars.joinToString(separator = "")
        for (index in currentIndex until chars.size) {
            if (chars[index] == '0') continue
            chars[index] = '0'
            permute(chars, index + 1, set)
            chars[index] = '1'
        }
    }

    private fun getRookMovementMap(): Map<Int, Map<Blockers, Movements>> {
        val db = HashMap<Int, HashMap<Blockers, Movements>>()
        ROOK_MOVE_MASK.forEachIndexed { squareIndex, movementMask ->
            getPermutations(movementMask).forEach { maskedBlockers ->
                val position = Position.from(squareIndex)
                val blockers = createBoard(maskedBlockers)
                val movements = createBoard(0uL)

                // up
                for (i in 1..7) {
                    val x = position.row - i
                    if (x < 0) break
                    movements[x][position.column] = 1
                    if (blockers[x][position.column] == 1) break
                }

                // down
                for (i in 1..7) {
                    val x = position.row + i
                    if (x >= 8) break
                    movements[x][position.column] = 1
                    if (blockers[x][position.column] == 1) break
                }

                // left
                for (i in 1..7) {
                    val x = position.column - i
                    if (x < 0) break
                    movements[position.row][x] = 1
                    if (blockers[position.row][x] == 1) break
                }

                // right
                for (i in 1..7) {
                    val x = position.column + i
                    if (x >= 8) break
                    movements[position.row][x] = 1
                    if (blockers[position.row][x] == 1) break
                }

                db.computeIfAbsent(squareIndex) { HashMap() }[blockers.toULong()] = movements.toULong()
            }
        }
        return db
    }

    private fun getBishopMovementMap(): Map<Int, Map<Blockers, Movements>> {
        val db = HashMap<Int, HashMap<Blockers, Movements>>()
        BISHOP_MOVE_MASK.forEachIndexed { squareIndex, movementMask ->
            getPermutations(movementMask).forEach { maskedBlockers ->
                val position = Position.from(squareIndex)
                val blockers = createBoard(maskedBlockers)
                val movements = createBoard(0uL)
                // up left
                for (i in 1..7) {
                    val row = position.row - i
                    val column = position.column - i
                    if (row < 0 || column < 0) break
                    movements[row][column] = 1
                    if (blockers[row][column] == 1) break
                }
                // up right
                for (i in 1..7) {
                    val row = position.row - i
                    val column = position.column + i
                    if (row < 0 || column > 7) break
                    movements[row][column] = 1
                    if (blockers[row][column] == 1) break
                }
                // down left
                for (i in 1..7) {
                    val row = position.row + i
                    val column = position.column - i
                    if (row > 7 || column < 0) break
                    movements[row][column] = 1
                    if (blockers[row][column] == 1) break
                }
                // down right
                for (i in 1..7) {
                    val row = position.row + i
                    val column = position.column + i
                    if (row > 7 || column > 7) break
                    movements[row][column] = 1
                    if (blockers[row][column] == 1) break
                }
                db.computeIfAbsent(squareIndex) { HashMap() }[blockers.toULong()] = movements.toULong()
            }
        }
        return db
    }

    fun createBlackPassedPawnMask(): List<ULong> {
        val list = ArrayList<ULong>()
        fun Pair<Int, Int>.v() = first in 0..7 && second in 0..7
        for (squareIndex in 0..63) {
            val row = Position.squareIndexToRow(squareIndex)
            val column = Position.squareIndexToColumn(squareIndex)
            val board = createBoard()
            if (row in 1..5) {
                for (x in 1..7) {
                    Pair(row + x, column + 1).takeIf { it.v() && it.first <= 6 }?.run { board[first][second] = 1 }
                    Pair(row + x, column).takeIf { it.v() && it.first <= 6 }?.run { board[first][second] = 1 }
                    Pair(row + x, column - 1).takeIf { it.v() && it.first <= 6 }?.run { board[first][second] = 1 }
                }
            }
            list += board.toULong()
        }
        return list
    }
}
